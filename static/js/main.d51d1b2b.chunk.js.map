{"version":3,"sources":["components/Square.js","components/FieldRow.js","components/Field.js","components/GameLog.js","utils/placeShip.js","utils/standardShipsSet.js","Game.js","index.js"],"names":["Square","props","marker","x","y","containsShip","shot","isShipVisible","leftLine","topLine","className","onClick","FieldRow","row","map","square","index","key","Field","fieldMap","whose","GameLog","logs","item","String","field","ship","direction","i","startSquare","size","shipId","id","Ship","this","incrementId","hitpoints","latestId","set","push","Game","state","enemyField","enemyShips","standardShipsSet","areEnemyShipsInvisible","gameOver","j","forEach","placeShip","setState","newField","newShips","newLogs","hittedShip","find","every","handleClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d51d1b2b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Square(props) {\n    const { x, y, containsShip, shot, isShipVisible } = props;\n\n    const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n    const letters = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'К'];\n\n    const leftLine = (x === 0) ? true : false;\n    const topLine = (y === 0) ? true : false;\n\n    let marker;\n    if (containsShip) {\n        if (shot) {\n            marker = 'X';\n        } else {\n            marker = '';\n        }\n    } else {\n        if (shot) {\n            marker = '·';\n        } else {\n            marker = '';\n        }\n    }\n    return (\n        <button className={`square ${containsShip && isShipVisible ? 'visibleShip' : ''}`} onClick={props.onClick}>\n            <div className=\"marker\">{marker}</div>\n            {leftLine ? <span className=\"leftLine\">{numbers[y]}</span> : ''}\n            {topLine ? <span className=\"topLine\">{letters[x]}</span> : ''}\n        </button>\n    )\n}","import React from 'react';\nimport Square from './Square'\n\nexport default function FieldRow(props) {\n    const { row } = props;\n    return (\n        <div className=\"field-row\">\n            {row.map((square, index) => {\n                return (\n                    <Square \n                    key={index}\n                    x={square.x} \n                    y={square.y} \n                    containsShip={square.containsShip} \n                    shot={square.shot} \n                    isShipVisible={square.isShipVisible} \n                    onClick={() => props.onClick(square.y, square.x)} \n                    />\n                )\n            })}\n        </div>\n        )\n}","import React from 'react';\nimport FieldRow from './FieldRow';\n\nexport default function Field(props) {\n    const { fieldMap } = props;\n    return (\n        <div className={`field ${props.whose ? props.whose : \"\"}`}>\n            {fieldMap.map((row, index) => {\n                return (\n                    <FieldRow \n                    key={index}\n                    row={row} \n                    onClick={(y, x) => props.onClick(y, x)} \n                    />\n                )\n            })}\n        </div>\n    )\n}","import React from 'react';\n\nexport default function GameLog(props) {\n    return (\n        <div className=\"gamelog\">\n            <div className=\"gamelog-header\">Логи игры</div>\n            <ul className=\"gamelog-list\">\n                {props.logs.map((item, index) => {\n                    return (\n                        <li key={index}>{`${(index === 0) ? '' : String(index) + '.'} ${item}`}</li>\n                    )\n                })}\n            </ul>\n        </div>\n    )\n}","// небольшая функция-сниппет, которая добавляет корабль на поле\n// сдвиг на единицу появился из-за отсчета индекса массива с нуля\n\nexport default (field, ship) => {\n    switch(ship.direction) {\n        case 'right': \n        for (let i = ship.startSquare.x - 1; i < ship.startSquare.x - 1 + ship.size; i++) {\n            field[ship.startSquare.y - 1][i].containsShip = true;\n            field[ship.startSquare.y - 1][i].shipId = ship.id;\n        }\n        break;\n        case 'down': \n        for (let i = ship.startSquare.y - 1; i < ship.startSquare.y - 1 + ship.size; i++) {\n            field[i][ship.startSquare.x - 1].containsShip = true;\n            field[i][ship.startSquare.x - 1].shipId = ship.id;\n        }\n        break;\n        default:\n    }\n}","// компонент, который создает и экспортирует стандартный набор кораблей\n// направление кораблю задается для того, чтобы можно было определить, в какую сторону его рисовать из стартовой точки\n// Размещать корабли можно либо вертикально, либо горизонтально, были выбраны направления вправо(right) и вниз(down), \n// поскольку они совпадают с положительными направлениеми координатных осей\n\nclass Ship {\n    constructor(size, startSquare, direction) {\n        this.size = size;\n        this.startSquare = startSquare;\n        this.direction = direction;\n        this.id = Ship.incrementId();\n        this.hitpoints = this.size;\n    }\n\n    static incrementId() {\n        if (!this.latestId) {\n            this.latestId = 1;\n        } else {\n            this.latestId++;\n        }\n        return this.latestId\n    }\n}\n\nconst set = [];\nset.push(new Ship(4, { y: 1, x: 1}, 'right'));\nset.push(new Ship(3, { y: 3, x: 2}, 'down'));\nset.push(new Ship(3, { y: 4, x: 7}, 'down'));\nset.push(new Ship(2, { y: 8, x: 4}, 'right'));\nset.push(new Ship(2, { y: 10, x: 1}, 'right'));\nset.push(new Ship(2, { y: 10, x: 7}, 'right'));\nset.push(new Ship(1, { y: 3, x: 10}, 'right'));\nset.push(new Ship(1, { y: 5, x: 4}, 'right'));\nset.push(new Ship(1, { y: 6, x: 10}, 'right'));\nset.push(new Ship(1, { y: 10, x: 10}, 'right'));\n\nexport default set;\n","import React from 'react';\nimport Field from './components/Field';\nimport GameLog from './components/GameLog';\nimport placeShip from './utils/placeShip';\nimport standardShipsSet from './utils/standardShipsSet';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // playerField: [],\n      // playerShips: [],\n      // arePlayerShipsInvisible: true,\n      enemyField: [],\n      enemyShips: [...standardShipsSet],\n      areEnemyShipsInvisible: true,\n      gameOver: false,\n      logs: ['Ожидание хода...'],\n    };\n\n    // первоначальное (пустое) состояние поля\n    for (let i = 0; i < 10; i++) {\n      this.state.enemyField.push([]);\n    }\n\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        this.state.enemyField[i].push({\n          x: j,\n          y: i,\n          containsShip: false,\n          shot: false,\n          isShipVisible: false,\n          shipId: null,\n        });\n      }\n    }\n\n    // расставляем стандартный набор кораблей\n    this.state.enemyShips.forEach(ship => {\n      placeShip(this.state.enemyField, ship)\n    });\n  }\n\n  handleClick(y, x) {\n    if (this.state.enemyField[y][x].shot) {\n      return\n    }\n\n    if (this.state.gameOver) {\n      return\n    }\n\n    this.setState(state => {\n      const newField = [...state.enemyField];\n      newField[y][x].shot = true;\n      newField[y][x].isShipVisible = true;\n\n      const newShips = [...state.enemyShips];\n      const newLogs = [...state.logs];\n      let gameOver = false;\n\n      if (newField[y][x].containsShip) {\n        const hittedShip = newShips.find(ship => (ship.id === newField[y][x].shipId));\n        hittedShip.hitpoints--;\n        // если хитпоинтов больше нуля, то это обычное попадание\n        // если хитпоинтов ноль, то корабль уничтожен\n        if (hittedShip.hitpoints > 0) {\n          newLogs.push('Попадание!');\n        } else {\n          newLogs.push('Корабль уничтожен!');\n        }\n\n        if (newShips.every(ship => (ship.hitpoints === 0))) {\n          newLogs.push('Игра окончена.');\n          gameOver = true;\n        }\n      } else {\n        newLogs.push('Мимо!');\n      }\n\n      return {\n        enemyField: newField,\n        enemyShips: newShips,\n        gameOver: gameOver,\n        logs: newLogs,\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        {/* <Field whose=\"player\" fieldMap={this.state.playerField} /> */}\n        <Field \n        whose=\"enemy\" \n        fieldMap={this.state.enemyField} \n        onClick={(y, x) => this.handleClick(y, x)}\n        />\n        <GameLog logs={this.state.logs} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}